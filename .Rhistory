plot(iris$Sepal.Length, iris$Petal.Length,
main = "Scatter Plot and Regression Line of Sepal Length vs Petal Length",
xlab = "Sepal Length", ylab = "Petal Length",
col = "blue")
# Fit linear regression model
model <- lm(Petal.Length ~ Sepal.Length, data = iris)
# Adding regression line
abline(model, col = "red")
# Adding regression equation
eq <- paste("y =", round(coef(model)[1], 2), "+", round(coef(model)[2], 2), "x")
text(6.5, 2.5, eq, pos = 4)
# Adding confidence intervals
conf_interval <- predict(model, interval = "confidence")
lines(iris$Sepal.Length, conf_interval[, "lwr"], col = "green", lty = 2)
lines(iris$Sepal.Length, conf_interval[, "upr"], col = "green", lty = 2)
# Add legend
legend("topleft", legend = c("Data", "Regression Line", "Confidence Intervals"),
col = c("blue", "red", "green"), lty = c(NA, 1, 2), lwd = c(NA, 1, 1),
pch = c(1, NA, NA), bty = "n")
# Creating a scatter plot
plot(iris$Sepal.Length, iris$Petal.Length,
main = "Scatter Plot and Regression Line of Sepal Length vs Petal Length",
xlab = "Sepal Length", ylab = "Petal Length",
col = "blue")
# Fit linear regression model
model <- lm(Petal.Length ~ Sepal.Length, data = iris)
# Adding regression line
abline(model, col = "red")
# Adding regression equation
eq <- paste("y =", round(coef(model)[1], 2), "+", round(coef(model)[2], 2), "x")
text(6.5, 2.5, eq, pos = 4)
# Adding confidence intervals
conf_interval <- predict(model, interval = "confidence")
lines(iris$Sepal.Length, conf_interval[, "lwr"], col = "green", lty = 2)
lines(iris$Sepal.Length, conf_interval[, "upr"], col = "green", lty = 2)
# Add legend
legend("topleft", legend = c("Data", "Regression Line", "Confidence Intervals"),
col = c("blue", "red", "green"), lty = c(NA, 1, 2), lwd = c(NA, 1, 1),
pch = c(1, NA, NA), bty = "o")
# Creating a scatter plot
plot(iris$Sepal.Length, iris$Petal.Length,
main = "Scatter Plot and Regression Line of Sepal Length vs Petal Length",
xlab = "Sepal Length", ylab = "Petal Length",
col = "blue")
# Fit linear regression model
model <- lm(Petal.Length ~ Sepal.Length, data = iris)
# Adding regression line
abline(model, col = "red")
# Adding regression equation
eq <- paste("y =", round(coef(model)[1], 2), "+", round(coef(model)[2], 2), "x")
text(6.5, 2.5, eq, pos = 4)
# Adding confidence intervals
conf_interval <- predict(model, interval = "confidence")
lines(iris$Sepal.Length, conf_interval[, "lwr"], col = "green", lty = 2)
lines(iris$Sepal.Length, conf_interval[, "upr"], col = "green", lty = 2)
# Add legend
legend("topleft", legend = c("Data", "Regression Line", "Confidence Intervals"),
col = c("blue", "red", "green"), lty = c(NA, 1, 2), lwd = c(NA, 1, 1),
pch = c(1, NA, NA), bty = "o" # Enclose the legend in a box
)
# Creating a scatter plot
plot(iris$Sepal.Length, iris$Petal.Length,
main = "Scatter Plot and Regression Line of Sepal Length vs Petal Length",
xlab = "Sepal Length", ylab = "Petal Length",
col = "blue")
# Fit linear regression model
model <- lm(Petal.Length ~ Sepal.Length, data = iris)
# Adding regression line
abline(model, col = "red")
# Adding regression equation
eq <- paste("y =", round(coef(model)[1], 2), "+", round(coef(model)[2], 2), "x")
text(6.5, 2.5, eq, pos = 4)
# Adding confidence intervals
conf_interval <- predict(model, interval = "confidence")
lines(iris$Sepal.Length, conf_interval[, "lwr"], col = "green", lty = 2)
lines(iris$Sepal.Length, conf_interval[, "upr"], col = "green", lty = 2)
# Add legend
legend("topleft", legend = c("Data Points", "Regression Line", "Confidence Intervals"),
col = c("blue", "red", "green"), lty = c(NA, 1, 2), lwd = c(NA, 1, 1),
pch = c(1, NA, NA), bty = "o" # Enclose the legend in a box
)
library(ggplot2)
# Scatter plot with regression line
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter Plot of Sepal Length vs Sepal Width with Regression Line",
x = "Sepal Length", y = "Sepal Width") +
theme_minimal()
# Scatter plot with regression line
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter Plot of Sepal Length vs Sepal Width with Regression Line",
x = "Sepal Length", y = "Sepal Width") +
theme_bw()
# Faceted scatter plot
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
facet_wrap(~ Species) +
labs(title = "Faceted Scatter Plot of Sepal Length vs Sepal Width",
x = "Sepal Length", y = "Sepal Width") +
theme_minimal()
# Flipped coordinate system
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
coord_flip() +
labs(title = "Scatter Plot with Flipped Coordinate System",
x = "Sepal Length", y = "Sepal Width") +
theme_minimal()
# Flipped coordinate system
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
coord_flip() +
labs(title = "Scatter Plot with Flipped Coordinate System",
x = "Sepal Length", y = "Sepal Width") +
theme_bw()
install.packages("tutorial.helpers")
install.packages("tutorial")
# Generate the sequence
seq <- seq(from = 2, to = 1000, by = 17)
# Access the 105th number
number_105 <- seq[105]
# Print the 105th number
print(number_105)
# Generate the sequence
seq <- seq(from = 2, to = 1000, by = 17)
# Access the 105th number
number_105 <- seq[15]
# Print the 105th number
print(number_105)
# Generate the sequence
seq <- seq(from = 2, to = 1000, by = 17)
length(seq)
# Access the 105th number
number_105 <- seq[15]
# Print the 105th number
print(number_105)
(60.89*125.57)-(59.88*125.97)
(237.69*125.53)-(236.68*126.70)
(24165.48-863)
(24165.44)*0.1
(24165.44)*0.1+(130)
# Create the students dataframe
id <- 1:1000
set.seed(60)
marks <- sample(10:100, 1000, replace = TRUE)
gender <- sample(c("Male", "Female"), 1000, replace = TRUE)
grade <- factor(c(marks >= 0) + (marks >= 40) + (marks >= 50) + (marks >= 60) + (marks >= 70), labels = c("E", "D", "C", "B", "A"))
status <- factor(c(marks >= 0) + (marks >= 40), labels = c("Fail", "Pass"))
students <- data.frame(id, gender, marks, grade, status)
# Define breaks based on the grading classes
breaks <- c(0, 40, 50, 60, 70, 100)
# Create the histogram
hist(students$marks, breaks = breaks, col = "red",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Add custom axis labels
axis(1, at = c(20, 45, 55, 65, 85), labels = c("E (0-39)", "D (40-49)", "C (50-59)", "B (60-69)", "A (70-100)"))
# Count the number of students in each grade
grade_counts <- table(students$grade)
print(grade_counts)
# Determine the grade with the highest number of students
highest_grade <- names(which.max(grade_counts))
cat("The grade with the highest number of students is:", highest_grade, "\n")
# Create the students dataframe
id <- 1:1000
set.seed(60)
marks <- sample(10:100, 1000, replace = TRUE)
gender <- sample(c("Male", "Female"), 1000, replace = TRUE)
grade <- factor(c(marks >= 0) + (marks >= 40) + (marks >= 50) + (marks >= 60) + (marks >= 70), labels = c("E", "D", "C", "B", "A"))
status <- factor(c(marks >= 0) + (marks >= 40), labels = c("Fail", "Pass"))
students <- data.frame(id, gender, marks, grade, status)
# Define breaks based on the grading classes
breaks <- c(0, 40, 50, 60, 70, 100)
# Create the histogram
hist(students$marks, breaks = breaks, col = "red",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Add custom axis labels
axis(1, at = c(0, 40, 50, 60, 70, 100), labels = c("0-39", "40-49", "50-59", "60-69", "70-100"))
# Create the histogram
hist(students$marks, breaks = breaks, col = "blue",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Add custom axis labels
axis(1, at = c(0, 40, 50, 60, 70, 100), labels = c("0-39", "40-49", "50-59", "60-69", "70-100"))
# Create the histogram
hist(students$marks, breaks = breaks,
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Add custom axis labels
axis(1, at = c(0, 40, 50, 60, 70, 100), labels = c("0-39", "40-49", "50-59", "60-69", "70-100"))
# Create the students dataframe
id <- 1:1000
set.seed(60)
marks <- sample(10:100, 1000, replace = TRUE)
gender <- sample(c("Male", "Female"), 1000, replace = TRUE)
grade <- factor(c(marks >= 0) + (marks >= 40) + (marks >= 50) + (marks >= 60) + (marks >= 70), labels = c("E", "D", "C", "B", "A"))
status <- factor(c(marks >= 0) + (marks >= 40), labels = c("Fail", "Pass"))
students <- data.frame(id, gender, marks, grade, status)
# Define breaks based on the grading classes
breaks <- c(0, 40, 50, 60, 70, 100)
# Create the histogram
hist(students$marks, breaks = breaks, #col = "blue",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Add custom axis labels
axis(1, at = c(0, 40, 50, 60, 70, 100), labels = c("0-39", "40-49", "50-59", "60-69", "70-100"))
# Create the students dataframe
id <- 1:1000
set.seed(60)
marks <- sample(10:100, 1000, replace = TRUE)
gender <- sample(c("Male", "Female"), 1000, replace = TRUE)
grade <- factor(c(marks >= 0) + (marks >= 40) + (marks >= 50) + (marks >= 60) + (marks >= 70), labels = c("E", "D", "C", "B", "A"))
status <- factor(c(marks >= 0) + (marks >= 40), labels = c("Fail", "Pass"))
students <- data.frame(id, gender, marks, grade, status)
# Define breaks based on the grading classes
breaks <- c(0, 40, 50, 60, 70, 100)
# Create the histogram
hist(students$marks, breaks = breaks, #col = "red",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Add custom axis labels
axis(1, at = c(20, 45, 55, 65, 85), labels = c("E (0-39)", "D (40-49)", "C (50-59)", "B (60-69)", "A (70-100)"))
# Count the number of students in each grade
grade_counts <- table(students$grade)
print(grade_counts)
# Determine the grade with the highest number of students
highest_grade <- names(which.max(grade_counts))
cat("The grade with the highest number of students is:", highest_grade, "\n")
# Create the students dataframe
id <- 1:1000
set.seed(60)
marks <- sample(10:100, 1000, replace = TRUE)
gender <- sample(c("Male", "Female"), 1000, replace = TRUE)
grade <- factor(c(marks >= 0) + (marks >= 40) + (marks >= 50) + (marks >= 60) + (marks >= 70), labels = c("E", "D", "C", "B", "A"))
status <- factor(c(marks >= 0) + (marks >= 40), labels = c("Fail", "Pass"))
students <- data.frame(id, gender, marks, grade, status)
# Define breaks based on the grading classes
breaks <- c(0, 40, 50, 60, 70, 100)
# Create the histogram
hist(students$marks, breaks = breaks, #col = "red",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Count the number of students in each grade
grade_counts <- table(students$grade)
print(grade_counts)
# Determine the grade with the highest number of students
highest_grade <- names(which.max(grade_counts))
cat("The grade with the highest number of students is:", highest_grade, "\n")
# Create the students dataframe
id <- 1:1000
set.seed(60)
marks <- sample(10:100, 1000, replace = TRUE)
gender <- sample(c("Male", "Female"), 1000, replace = TRUE)
grade <- factor(c(marks >= 0) + (marks >= 40) + (marks >= 50) + (marks >= 60) + (marks >= 70), labels = c("E", "D", "C", "B", "A"))
status <- factor(c(marks >= 0) + (marks >= 40), labels = c("Fail", "Pass"))
students <- data.frame(id, gender, marks, grade, status)
# Define breaks based on the grading classes
breaks <- c(0, 40, 50, 60, 70, 100)
# Create the histogram
hist(students$marks, breaks = breaks, col = "black",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Create the histogram
hist(students$marks, breaks = breaks, col = "red",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Create the histogram
hist(students$marks, breaks = breaks, col = "red",
main = "Distribution of Marks by Grade",
xlab = "Marks", ylab = "Number of Students")
# Add custom axis labels
#axis(1, at = c(20, 45, 55, 65, 85), labels = c("E (0-39)", "D (40-49)", "C (50-59)", "B (60-69)", "A (70-100)"))
# Add custom axis labels
axis(1, at = c(20, 45, 55, 65, 85), labels = c("E ", "D ", "C ", "B ", "A "))
# Calculate the mean marks by gender
mean_marks_by_gender <- aggregate(marks ~ gender, data = students, mean)
View(mean_marks_by_gender)
# Plot the barplot
barplot(mean_marks_by_gender$marks,
names.arg = mean_marks_by_gender$gender,
col = c("blue", "pink"),
main = "Mean Marks by Gender",
xlab = "Gender",
ylab = "Mean Marks",
ylim = c(0, 100),
beside = TRUE,
border = "black",
las = 1, # make axis labels perpendicular to axis
cex.names = 1.2, # adjust the size of the axis labels
cex.axis = 1.2, # adjust the size of the axis text
cex.main = 1.5, # adjust the size of the main title
cex.lab = 1.2) # adjust the size of the axis labels text
# Add text labels on top of the bars
text(x = c(1, 2),
y = mean_marks_by_gender$marks,
label = round(mean_marks_by_gender$marks, 1),
pos = 3, # position above the bars
cex = 1.2, # adjust the size of the text
col = "black")
# Determine which gender had the highest average score
highest_avg_gender <- mean_marks_by_gender[which.max(mean_marks_by_gender$marks), ]
cat("The gender with the highest average score is:", highest_avg_gender$gender, "with an average score of", round(highest_avg_gender$marks, 1), "\n")
# Determine which gender had the highest average score
highest_avg_gender <- mean_marks_by_gender[which.max(mean_marks_by_gender$marks), ]
cat("The gender with the highest average score is:", highest_avg_gender$gender, "with an average score of", round(highest_avg_gender$marks, 1), "marks", "\n")
# Calculate the mean marks by gender
mean_marks_by_gender <- aggregate(marks ~ gender, data = students, mean)
# Plot the barplot
barplot(mean_marks_by_gender$marks,
names.arg = mean_marks_by_gender$gender,
col = c("blue", "pink"),
main = "Mean Marks by Gender",
xlab = "Gender",
ylab = "Mean Marks",
ylim = c(0, 100),
beside = TRUE,
border = "black",
las = 1, # make axis labels perpendicular to axis
cex.names = 1.2, # adjust the size of the axis labels
cex.axis = 1.2, # adjust the size of the axis text
cex.main = 1.5, # adjust the size of the main title
cex.lab = 1.2) # adjust the size of the axis labels text
# Add text labels on top of the bars
text(x = c(1, 2),
y = mean_marks_by_gender$marks,
label = round(mean_marks_by_gender$marks, 1),
pos = 3, # position above the bars
cex = 1.2, # adjust the size of the text
col = "black")
# Determine which gender had the highest average score
highest_avg_gender <- mean_marks_by_gender[which.max(mean_marks_by_gender$marks), ]
cat("The gender with the highest average score is:", highest_avg_gender$gender, "with an average score of", round(highest_avg_gender$marks, 1), "marks", "\n")
# Calculate the mean marks by gender
mean_marks_by_gender <- aggregate(marks ~ gender, data = students, mean)
# Plot the barplot
barplot(mean_marks_by_gender$marks,
names.arg = mean_marks_by_gender$gender,
col = c("blue", "pink"),
main = "Mean Marks by Gender",
xlab = "Gender",
ylab = "Mean Marks",
ylim = c(0, 100),
beside = TRUE,
border = "black",
las = 1, # make axis labels perpendicular to axis
cex.names = 1.2, # adjust the size of the axis labels
cex.axis = 1.2, # adjust the size of the axis text
cex.main = 1.5, # adjust the size of the main title
cex.lab = 1.2) # adjust the size of the axis labels text
# Add text labels on top of the bars
text(x = c(1, 2),
y = mean_marks_by_gender$marks,
label = round(mean_marks_by_gender$marks, 1),
pos = 3, # position above the bars
cex = 1.2, # adjust the size of the text
col = "black")
# Determine which gender had the highest average score
highest_avg_gender <- mean_marks_by_gender[which.max(mean_marks_by_gender$marks), ]
highest_avg_gender
# Calculate the mean marks by gender
mean_marks_by_gender <- aggregate(marks ~ gender, data = students, mean)
# Plot the barplot
barplot(mean_marks_by_gender$marks,
names.arg = mean_marks_by_gender$gender,
col = c("blue", "pink"),
main = "Mean Marks by Gender",
xlab = "Gender",
ylab = "Mean Marks",
ylim = c(0, 100),
beside = TRUE,
border = "black",
las = 1, # make axis labels perpendicular to axis
cex.names = 1.2, # adjust the size of the axis labels
cex.axis = 1.2, # adjust the size of the axis text
cex.main = 1.5, # adjust the size of the main title
cex.lab = 1.2) # adjust the size of the axis labels text
# Add text labels on top of the bars
text(x = c(1, 2),
y = mean_marks_by_gender$marks,
label = round(mean_marks_by_gender$marks, 1),
pos = 3, # position above the bars
cex = 1.2, # adjust the size of the text
col = "black")
# Determine which gender had the highest average score
highest_avg_gender <- mean_marks_by_gender[which.max(mean_marks_by_gender$marks), ]
cat("The gender with the highest average score is:", highest_avg_gender$gender, "with an average score of", round(highest_avg_gender$marks, 1), "marks", "\n")
View(mean_marks_by_gender)
# Create the students dataframe
id <- 1:1000
set.seed(60)
marks <- sample(10:100, 1000, replace = TRUE)
gender <- sample(c("Male", "Female"), 1000, replace = TRUE)
grade <- factor(c(marks >= 0) + (marks >= 40) + (marks >= 50) + (marks >= 60) + (marks >= 70), labels = c("E", "D", "C", "B", "A"))
status <- factor(c(marks >= 0) + (marks >= 40), labels = c("Fail", "Pass"))
students <- data.frame(id, gender, marks, grade, status)
# Calculate the mean marks by gender
mean_marks_by_gender <- aggregate(marks ~ gender, data = students, mean)
# Plot the barplot
barplot(mean_marks_by_gender$marks,
names.arg = mean_marks_by_gender$gender,
col = c("blue", "pink"),
main = "Mean Marks by Gender",
xlab = "Gender",
ylab = "Mean Marks",
ylim = c(0, 100),
beside = TRUE,
border = "black",
las = 1, # make axis labels perpendicular to axis
cex.names = 1.2, # adjust the size of the axis labels
cex.axis = 1.2, # adjust the size of the axis text
cex.main = 1.5, # adjust the size of the main title
cex.lab = 1.2) # adjust the size of the axis labels text
# Add text labels on top of the bars
text(x = c(1, 2),
y = mean_marks_by_gender$marks,
label = round(mean_marks_by_gender$marks, 1),
pos = 3, # position above the bars
cex = 1.2, # adjust the size of the text
col = "black")
View(mean_marks_by_gender)
# Determine which gender had the highest average score
highest_avg_gender <- mean_marks_by_gender[which.max(mean_marks_by_gender$marks), ]
cat("The gender with the highest average score is:", highest_avg_gender$gender, "with an average score of", round(highest_avg_gender$marks, 1), "marks", "\n")
abs2 = function(x) {
if (x < 0) out = -x
else out = x
out
}
abs2(-4)
sqdif = function(x = 2, y = 3) {
if (!is.numeric(x) | !is.numeric(y)){
stop("Both x and y must be numeric")
} else return((x - y)^2)
}
sqdif
sqdif(10, 5)
sqdif("5", 1)
top = function(mat, n = 5) {
return(mat[1:n, 1:n])
}
top(matrix(1:100, ncol=10))
top(matrix(1:25, ncol = 5), 2)
#iv.
pdf('figures/ex4_dotplots.pdf')
par(mfrow = c(2, 2))
#c.
my_t_CI = function(x) {
x_bar = mean(x)
n = length(x)
z = qt(0.975, df = n-1) # approximately 1.96 for large n
CI.lower = x_bar - z*sd(x) / sqrt(n)
CI.upper = x_bar + z*sd(x) / sqrt(n)
return(list(x_bar = x_bar, CI.lower = CI.lower, CI.upper = CI.upper))
}
set.seed(60)
data_sim = rnorm(100)
my_t_CI(data_sim)
t.test(data_sim)
#i.
library(ggplot2)
#Create the data
x <- seq(-6*pi, 6*pi, length.out = 100)
#ggplot2 needs the data to be in a data.frame or tibble with all the data.
dat <- data.frame(x = x, y = sin(x)/x)
View(dat)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_line()
#ggplot2 needs the data to be in a data.frame or tibble with all the data.
dat <- data.frame(x = x, y = sin(x))
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_line()
#ggplot2 needs the data to be in a data.frame or tibble with all the data.
dat <- data.frame(x = x, y = sin(x)/x)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_line()
#basic version with points
ggplot(cars, mapping = aes(x = speed, y = dist)) +
geom_point()
# add a second geom that produces a smoothed line (default is a local polynomial regression)
ggplot(cars, mapping = aes(x = speed, y = dist)) +
geom_point(mapping = aes(color = dist > 80)) +
scale_color_manual(values = c("black", "red")) +
geom_smooth()
#basic version with points
ggplot(cars, mapping = aes(x = speed, y = dist)) +
geom_point()
#Add color as a mapping that is only used by geom_points
ggplot(cars, mapping = aes(x = speed, y = dist)) +
geom_point(mapping = aes(color = dist > 80))
# define the colors using a manual color scale
ggplot(cars, mapping = aes(x = speed, y = dist)) +
geom_point(mapping = aes(color = dist > 80)) +
scale_color_manual(values = c("black", "red"))
# add a second geom that produces a smoothed line (default is a local polynomial regression)
ggplot(cars, mapping = aes(x = speed, y = dist)) +
geom_point(mapping = aes(color = dist > 80)) +
scale_color_manual(values = c("black", "red")) +
geom_smooth()
#1. Base R
#i.
my.num = c(5,4,7,8,12,14)
#ii.
my.num * 4
#iii.
my.char = c("Robert", "Parker", "Robert", "Robert", "Parker")
#iv.
both = c(my.num, my.char)
#v
length(both)
