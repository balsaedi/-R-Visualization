[["index.html", "R Base Data Visualization Chapter 1 INTRODUCTION TO R AND DATA VISUALIZATION 1.1 Introduction 1.2 Why Use R for Data Visualization? 1.3 Installing and Configuring R and RStudio 1.4 Basic R Concepts. 1.5 Practical Examples: Exercises", " R Base Data Visualization Basim Alsaedi 2024-04-22 Chapter 1 INTRODUCTION TO R AND DATA VISUALIZATION 1.1 Introduction Overview of R R is a powerful programming language and environment widely used for statistical computing and graphics. It provides a wide variety of statistical and graphical techniques, and it is highly extensible. R is freely available and runs on all major platforms, making it an excellent choice for data analysis and visualization. With its extensive libraries, R enables users to manipulate data, conduct statistical analyses, and create visualizations to explore and communicate insights effectively. Whether you’re a beginner or an experienced data scientist, R provides a flexible and comprehensive environment for all your data analysis needs. 1.2 Why Use R for Data Visualization? Advantages of R over other programming languages and tools R has thousands of packages, designed, maintained, and widely used by statisticians. The R graphs have much more fun compared to other tools such as STATA. R has a rather liberal syntax, and variables don’t need to be declared as they would in (for example) C++, which makes it very easy to code in. R is designed to make it very easy to write functions which are applied point wise to every element of a vector. This is extremely useful in statistics. R is powerful: if a command doesn’t exist already, you can code it yourself. R’s extensive package ecosystem A package is a collection (or library) of functions, datasets, and other objects. Most packages are not loaded automatically, so you have to do it yourself. R’s extensive package ecosystem provides a vast array of tools for data analysis and visualization. These packages are contributed by a vibrant community of developers and cover almost every aspect of data science. Some of the most popular visualization packages include: ggplot2: The package provides an intuitive syntax for creating complex and beautiful visualizations. plotly: This package allows one to create interactive web-based visualizations directly from R. ggvis: It allows the creation of web-based visualizations with reactive features using the grammar of graphics syntax. lattice: It is particularly useful for creating trellis plots, which allow you to visualize relationships in multivariate data. gganimate: The package allows you to easily add animations to your visualizations, making it ideal for exploring changes in data over time. In this course, we will focus on the base R graphics system, which provides a solid foundation for understanding how plots are constructed in R. Once you have a good grasp of the basics, you can easily transition to more specialized packages like ggplot2 and plotly to create even more sophisticated visualizations. 1.3 Installing and Configuring R and RStudio Before installing RStudio in your computer, first start with R. RStudio is a front end program that lets you write R code, view plots, and do many other useful things. The detailed steps below show how to install R and RStudio in your computer system on both Windows, Mac and Linux operating systems. Step-by-step guide on installing R Download the R installer from https://cran.r-project.org/. a). Click on the link for your operating system. Make sure the installer is for the latest R version. For example, the latest version is 4.3.3. b). Click install R for the first time. c). Use the download link at the top and save the file. Run the installer (double click), default settings are fine. Step-by-step guide on installing RStudio and Set Up Wait until the R installer has finished. 2.Download RStudio installer from the official website https://posit.co/download/rstudio-desktop/. After the download is complete, double-click on the installer and follow the installation steps to install it in your computer. After successful installation, you can launch RStudio by double-clicking the RStudio icon on your desktop or from the Start menu. You can install the packages using the install.packages() function. However, for the base R visualization, you don’t need to install any package which will support in plotting of graphs except where we you will be required to use data that comes with R packages. The last set up may be setting your working directory to the folder where your R scripts and data files are located. This makes it easier to access your files but it is optional. 1.4 Basic R Concepts. Introduction to R syntax and basic commands R is designed for statistical computing and graphics. In this section, we will cover some basic syntax and commands to help you get started with R. 1. R as a Calculator: You can use R as a simple calculator. Here are some basic arithmetic operations: # Addition 2 + 3 # Subtraction 5 - 2 # Multiplication 2 * 3 # Division 6 / 2 # Exponentiation 2^3 2. Assigning Values to Variables: You can store values in variables using the assignment operator &lt;- or =. # Assigning a value to a variable x &lt;- 5 y &lt;- 3 # You can also use = z = x + y 3. Basic Data Types: R supports several basic data types, including numeric, character, logical, and complex. # Numeric num &lt;- 10 # Character char &lt;- &quot;Hello, Basim!&quot; # Logical logic &lt;- TRUE # Complex comp &lt;- 3 + 2i 4. Vectors: A vector is a sequence of data elements of the same basic type. You can create a vector using the c() function. # Creating a numeric vector nums &lt;- c(1, 2, 3, 4, 5) # Creating a character vector chars &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;) 5. Indexing and Slicing: You can access elements of a vector using square brackets []. # Accessing elements of a vector nums &lt;- c(1, 2, 3, 4, 5) nums[1] # Access the first element of nums nums[2:4] # Access the second to fourth elements of nums nums[1,4,6] # Access the first, fourth and sixth elements of nums 6. Functions: R has a large number of built-in functions, and you can also create your own functions for some tasks that can not be achieved by built-in functions. # Built-in function sqrt(16) # Square root function nums &lt;- c(1, 2, 3, 4, 5) mean(nums) # the mean of nums elements var(nums) # the variance sd(nums) # standard deviation # User-defined function add &lt;- function(a, b) { return(a + b) } add(3, 5) Overview of R’s data types and structures essential for visualization R provides several data types and structures that are essential for data visualization. Understanding these data types and structures is crucial for effectively analyzing and visualizing data. 1. Numeric: Numeric data type is used to represent continuous numerical values. num &lt;- 5.6 2. Integer: Integer data type is used to represent integer values. int &lt;- 10L 3. Character: Character data type is used to represent text data. char &lt;- &quot;Hi, John!&quot; 4. Logical: Logical data type is used to represent Boolean values ( TRUE or FALSE). logic &lt;- TRUE 5. Vector: A vector is a sequence of data elements of the same basic type. It is created using the concatenate c() command. nums &lt;- c(1, 2, 3, 4, 5) # A vector of numeric data type chars &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;) # A vector of character data type 6. Matrix: A matrix is a two-dimensional array with rows and columns in that order respectively, that is (\\(R \\times C\\) ). It is created using the matrix() command. mat &lt;- matrix(1:12, nrow = 3, ncol = 4) # A matrix with three rows and 2 columns 7. Data Frame: A data frame is a two-dimensional data structure with rows and columns, similar to a spreadsheet. It can contain several data types. It is created using the command data.frame() command. df &lt;- data.frame( Name = c(&quot;John&quot;, &quot;Alice&quot;, &quot;Bob&quot;), Age = c(25, 30, 35), Height = c(175, 160, 180) ) 8. List: A list is an ordered collection of objects (which may be of different types: numeric, character, etc.). It is created using the list() command. lst &lt;- list( Name = c(&quot;John&quot;, &quot;Alice&quot;, &quot;Bob&quot;), Age = c(25, 30, 35), Height = c(175, 160, 180) ) 9. Factors: Factors are used to represent categorical data. It is created using the factor() command. gender &lt;- factor(c(&quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Female&quot;)) loan_default&lt;-factor(c(&#39;Yes&#39;, &#39;No&#39;)) 1.5 Practical Examples: Exercises Exercise 1: Basic arithmetic Create a variable called \\(x\\) and give it the value 15.Take the exponent of the variable and add 5 to the final result. Print the final result of \\(x\\). # Your code Exercise 2: Vectors: The weights of five people before and after a diet programme are given in the table below. Read the ‘before’ and ‘after’ values into two different vectors called before and after. Use R to evaluate the amount of weight lost for each participant. What is the average amount of weight lost? Before 78 72 78 79 105 After 67 65 79 70 93 #Your code Exercise 3: Matrices Create two matrices called A and X defined below. \\[ A= \\begin{pmatrix} 1 &amp; 4 &amp; 7 \\\\ 2 &amp; 5 &amp; 8 \\\\ 3 &amp; 6 &amp; 10 \\\\ \\end{pmatrix} \\] \\[ X= \\begin{pmatrix} 1&amp;2&amp;3\\\\ \\end{pmatrix} \\] Find: the product of A and X. the transpose of A. the determinant of A. the diagonal of A. the inverse of A. #Your code Exercise 4: Creating Data Frames Create a small data frame representing a database of films. It should contain the fields title, director, year, country, and at least three films. Create a second data frame of the same format as above, but containing just one new film. Merge the two data frames using rbind(). Try sorting the titles using sort(): what happens? #Your code Exercise 5: Factors and Simple plot Suppose we have the heights of 100 individuals, where the first are 50 male and the rest female. Generate 100 fixed random numbers from a normal distribution where the mean height of male is 170 while that of female is 160 with an equal standard deviation of 10 and call that vector as ‘height’. Create another vector called ‘sex’ with two entries ‘M’ and ‘F’ each replicated 50 times. Tell R to treat ‘sex’ as a categorical variable and name it as ‘Sex’. Plot Sex against height using plot() function. Which type of plot have you obtained? What happens if you try to plot sex against height instead? #Your code "],["r-base-graphics---starting-with-the-basics.html", "Chapter 2 R BASE GRAPHICS - STARTING WITH THE BASICS 2.1 Exploring Base Graphics in R 2.2 Creating Basic Plots 2.3 Customizing Plots 2.4 Practical Examples: Exercises", " Chapter 2 R BASE GRAPHICS - STARTING WITH THE BASICS 2.1 Exploring Base Graphics in R Overview of the philosophy behind R’s base graphics system, including its stateful nature Stateful Nature R’s base graphics system is stateful, meaning that plots are built up incrementally. You start with an empty plot and add elements to it one by one. This is in contrast to systems like ggplot2, which use a declarative approach where you specify the plot all at once. Stateful nature means that every new plotting command modifies the existing plot or creates a new one if none exists. This allows for a high degree of flexibility but can sometimes lead to complex and intuitive behavior. R’s base graphics system provides a set of low-level graphics primitives for creating plots. These primitives include functions for drawing points, lines, polygons, text, and more. By combining these primitives, you can create a wide variety of plots, from simple scatter plots to complex multi-panel layouts. Philosophy The philosophy behind R’s base graphics system is to provide a flexible and powerful tool for creating a wide range of plots. The emphasis is on simplicity and ease of use, making it easy for users to quickly create informative visualizations. However, despite that base graphics are powerful, they do have some limitations compared to more modern plotting systems like ggplot2. For instance, they lack some of the advanced features of ggplot2, such as automatic faceting and easy customization of plot themes. Introduction to Core Plotting Functions in R R provides a variety of core plotting functions that are useful for creating basic visualizations. In this section, we will explore some of the most commonly used plotting functions. The commonly used core plotting functions are plot(), hist(), boxplot() and barplot(). The plot() function is used to create scatter plots, line plots, and other types of plots. It is a versatile function that can be used to visualize relationships between two or more variables. The hist() function is used to create histograms, which are used to visualize the distribution of a single numeric variable. Note that the optional argument breaks chooses (approximately) how many bins the histogram should have, and col alters the colour of the bars. The boxplot() function is used to create box plots, which are used to visualize the distribution of a numeric variable, optionally broken down by a categorical variable. The barplot() function is used to create bar plots, which are used to visualize the distribution of a categorical variable. 2.2 Creating Basic Plots Detailed instructions on using plot() for scatter plots and line graphs In order to get the full documentation of the plot() function, run ?plot in R. The syntax for the function is given below. # plot(x, y = NULL, type = &quot;p&quot;, xlim = NULL, ylim = NULL, # log = &quot;&quot;, main = NULL, sub = NULL, xlab = NULL, ylab = NULL, # ann = par(&quot;ann&quot;), axes = TRUE, frame.plot = axes, # panel.first = NULL, panel.last = NULL, asp = NA, # xgap.axis = NA, ygap.axis = NA, # ...) Arguments \\(x, y\\): the \\(x\\) and \\(y\\) arguments provide the x and y coordinates for the plot. \\(type\\): 1-character string giving the type of plot desired.”p” for points, “l” for lines “b” for both points and lines, “c” for empty points joined by lines, “o” for overplotted points and lines, “s” and “S” for stair steps and “h” for histogram-like vertical lines. Finally, “n” does not produce any points or lines. \\(xlim,\\quad ylim\\): the x and y limits respectively. \\(log\\): a character string which contains “x” if the x axis is to be logarithmic, “y” if the y axis is to be logarithmic and “xy” or “yx” if both axes are to be logarithmic. \\(main\\) : a main title for the plot. \\(sub\\): a subtitle for the plot. \\(xlab,\\quad ylab\\) : The labels for x-axis and y-axis respectively, defaults to a description of x and y. The commonly used graphical parameters are: \\(col\\) : The colors for lines and points. Multiple colors can be specified so that each point can be given its own color. If there are fewer colors than points they are recycled in the standard fashion. Lines will all be plotted in the first colour specified. \\(bg\\) : a vector of background colors for open plot symbols \\(pch\\): a vector of plotting characters or symbols \\(cex\\) : a numerical vector giving the amount by which plotting characters and symbols should be scaled relative to the default. \\(lty\\): a vector of line types \\(lwd\\): a vector of line widths Example: # Create a scatter plot x &lt;- c(1, 2, 3, 4, 5) y &lt;- c(2, 3, 5, 7, 11) plot(x, y, type = &quot;p&quot;, col = &quot;blue&quot;, pch = 16, main = &quot;Scatter Plot&quot;, xlab = &quot;X&quot;, ylab = &quot;Y&quot;) # Create a line plot plot(x, y, type = &quot;l&quot;, col = &quot;red&quot;, lwd = 1, main = &quot;Line plot&quot;, xlab = NULL, ylab = NULL) Using hist() to create histograms for data distribution analysis Histograms are useful for visualizing the frequency distribution of a single variable. Similarly, you can get more documentation of the hist() function by running the command ?hist in R. The generic function hist computes a histogram of the given data values.The default behavior for a histogram is to display frequencies on the vertical axis; probability densities can be displayed using the freq=FALSE option. The default title is given by paste(“Histogram of” , x) where x is the name of the variable being plotted; this can be changed with the main option. The common syntax for the function is given below #hist(x, breaks = &quot;Sturges&quot;, # freq = NULL, probability = !freq, # include.lowest = TRUE, right = TRUE, fuzz = 1e-7, # density = NULL, angle = 45, col = &quot;lightgray&quot;, border = NULL, # main = paste(&quot;Histogram of&quot; , xname), # xlim = range(breaks), ylim = NULL, # xlab = xname, ylab, # axes = TRUE, plot = TRUE, labels = FALSE, # nclass = NULL, warn.unused = TRUE, ...) # Create a histogram set.seed(100) # Fix the random numbers generated data &lt;- rnorm(100) # Generate some random data hist(data, breaks = &quot;Sturges&quot;, col = &quot;skyblue&quot;, main = &quot;Histogram&quot;, xlab = &quot;Value&quot;, ylab = &quot;Frequency&quot;) Implementing boxplot() and barplot() to visualize data comparisons and distributions The boxplot() and barplot() functions in R are commonly used for visualizing data comparisons and distributions. 1. boxplot() The common syntax of the function is given below. #boxplot(x, data = NULL, col = &quot;skyblue&quot;, main = NULL, xlab = NULL, ylab = #NULL) Example # Create a box plot data &lt;- data.frame( Group = rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each = 50), Value = c(rnorm(50), rnorm(50, mean = 2), rnorm(50, mean = 3)) ) boxplot(Value ~ Group, data = data, col = &quot;skyblue&quot;, main = &quot;Box Plot&quot;, xlab = &quot;Group&quot;, ylab = &quot;Value&quot;) 2.barplot() The syntax used for barplot() function is given below. #barplot(x, names.arg = NULL, col = &quot;skyblue&quot;, main = NULL, xlab = NULL, #ylab = NULL) Example # Create a bar plot data &lt;- table(mtcars$cyl) barplot(data, col = &quot;skyblue&quot;, main = &quot;Bar Plot&quot;, xlab = &quot;Number of Cylinders&quot;, ylab = &quot;Frequency&quot;) 2.3 Customizing Plots Basic customization options including colors, main titles, axis labels, and plot dimensions 1. Changing Colors # Create a scatter plot with custom colors x &lt;- c(1, 2, 3, 4, 5) y &lt;- c(2, 3, 5, 7, 11) plot(x, y, type = &quot;p&quot;, col = &quot;red&quot;, pch = 16, main = &quot;&quot;, xlab = &quot;X&quot;, ylab = &quot;Y&quot;) 2. Adding Titles and Axis Labels # Create a scatter plot with titles and axis labels x &lt;- c(1, 2, 3, 4, 5) y &lt;- c(2, 3, 5, 7, 11) plot(x, y, type = &quot;p&quot;, col = &quot;red&quot;, pch = 16, main = &quot;Scatter Plot&quot;, xlab = &quot;X-axis&quot;, ylab = &quot;Y-axis&quot;) 3. Changing Plot Dimensions # Create a scatter plot with custom dimensions x &lt;- c(1, 2, 3, 4, 5) y &lt;- c(2, 3, 5, 7, 11) plot(x, y, type = &quot;p&quot;, col = &quot;red&quot;, pch = 16, main = &quot;Scatter Plot&quot;, xlab = &quot;X&quot;, ylab = &quot;Y&quot;, xlim = c(0, 6), ylim = c(0, 12)) 4. Combining Customization Options # Create a scatter plot with custom colors, titles, axis labels, and dimensions x &lt;- c(1, 2, 3, 4, 5) y &lt;- c(2, 3, 5, 7, 11) plot(x, y, type = &quot;p&quot;, col = &quot;red&quot;, pch = 16, main = &quot;Scatter Plot&quot;, xlab = &quot;X-axis&quot;, ylab = &quot;Y-axis&quot;, xlim = c(0, 6), ylim = c(0, 12)) You can further customize your plots by adjusting parameters such as pch (for points), lwd (for lines), lty (for line type), cex (for point size), and more. Tips on enhancing plot readability and aesthetic appeal In order to have a plot with enhanced readability and have an aesthetic appeal, you need to use some of these tips: Choose appropriate colors: Use colors that complement each other and make it easy to distinguish different elements of the plot.Avoid using colors that are too bright or too similar to each other. Use appropriate font sizes and styles: Use larger font sizes for titles and axis labels to make them more prominent. Add grid lines: Adding grid lines can make it easier to read the plot and interpret the data. Use appropriate plot types: Choose the appropriate plot type for your data. For example, use a scatter plot for continuous data and a bar plot for categorical data. Use consistent and intuitive labeling: Make sure that the labels on your plot are consistent and intuitive, making it easy for readers to understand the information presented. Use legends for clarity: Use legends to explain the meaning of different colors or symbols used in the plot. You can also add more improvements to your plot to make it look more nice and appealing. 2.4 Practical Examples: Exercises "],["data-structures-relevant-to-visualization.html", "Chapter 3 DATA STRUCTURES RELEVANT TO VISUALIZATION", " Chapter 3 DATA STRUCTURES RELEVANT TO VISUALIZATION "],["customizing-graphs-in-r.html", "Chapter 4 CUSTOMIZING GRAPHS IN R", " Chapter 4 CUSTOMIZING GRAPHS IN R "],["advanced-base-plotting-techniques.html", "Chapter 5 ADVANCED BASE PLOTTING TECHNIQUES", " Chapter 5 ADVANCED BASE PLOTTING TECHNIQUES "],["plotting-time-series-data.html", "Chapter 6 PLOTTING TIME SERIES DATA", " Chapter 6 PLOTTING TIME SERIES DATA "],["statistical-graphs-in-r.html", "Chapter 7 STATISTICAL GRAPHS IN R", " Chapter 7 STATISTICAL GRAPHS IN R "],["introduction-to-ggplot2.html", "Chapter 8 INTRODUCTION TO ggplot2", " Chapter 8 INTRODUCTION TO ggplot2 "],["advanced-data-visualization-with-ggplot2-and-other-packages.html", "Chapter 9 ADVANCED DATA VISUALIZATION WITH ggplot2 AND OTHER PACKAGES", " Chapter 9 ADVANCED DATA VISUALIZATION WITH ggplot2 AND OTHER PACKAGES "],["real-world-applications-and-case-studies.html", "Chapter 10 REAL-WORLD APPLICATIONS AND CASE STUDIES", " Chapter 10 REAL-WORLD APPLICATIONS AND CASE STUDIES "],["references.html", "REFERENCES", " REFERENCES "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
