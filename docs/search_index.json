[["index.html", "R Base Data Visualization Chapter 1 INTRODUCTION TO R AND DATA VISUALIZATION 1.1 Introduction 1.2 Why Use R for Data Visualization? 1.3 Installing and Configuring R and RStudio 1.4 Basic R Concepts. 1.5 Practical Examples: Exercises", " R Base Data Visualization Basim Alsaedi 2024-04-22 Chapter 1 INTRODUCTION TO R AND DATA VISUALIZATION 1.1 Introduction 1.1.1 Overview of R R is a powerful programming language and environment widely used for statistical computing and graphics. It provides a wide variety of statistical and graphical techniques, and it is highly extensible. R is freely available and runs on all major platforms, making it an excellent choice for data analysis and visualization. With its extensive libraries, R enables users to manipulate data, conduct statistical analyses, and create visualizations to explore and communicate insights effectively. Whether you’re a beginner or an experienced data scientist, R provides a flexible and comprehensive environment for all your data analysis needs. 1.2 Why Use R for Data Visualization? 1.2.1 Advantages of R over other programming languages and tools. R has thousands of packages, designed, maintained, and widely used by statisticians. The R graphs have much more fun compared to other tools such as STATA. R has a rather liberal syntax, and variables don’t need to be declared as they would in (for example) C++, which makes it very easy to code in. R is designed to make it very easy to write functions which are applied point wise to every element of a vector. This is extremely useful in statistics. R is powerful: if a command doesn’t exist already, you can code it yourself. 1.2.2 R’s extensive package ecosystem. A package is a collection (or library) of functions, datasets, and other objects. Most packages are not loaded automatically, so you have to do it yourself. R’s extensive package ecosystem provides a vast array of tools for data analysis and visualization. These packages are contributed by a vibrant community of developers and cover almost every aspect of data science. Some of the most popular visualization packages include: ggplot2: The package provides an intuitive syntax for creating complex and beautiful visualizations. plotly: This package allows one to create interactive web-based visualizations directly from R. ggvis: It allows the creation of web-based visualizations with reactive features using the grammar of graphics syntax. lattice: It is particularly useful for creating trellis plots, which allow you to visualize relationships in multivariate data. gganimate: The package allows you to easily add animations to your visualizations, making it ideal for exploring changes in data over time. In this course, we will focus on the base R graphics system, which provides a solid foundation for understanding how plots are constructed in R. Once you have a good grasp of the basics, you can easily transition to more specialized packages like ggplot2 and plotly to create even more sophisticated visualizations. 1.3 Installing and Configuring R and RStudio Before installing RStudio in your computer, first start with R. RStudio is a front end program that lets you write R code, view plots, and do many other useful things. The detailed steps below show how to install R and RStudio in your computer system on both Windows, Mac and Linux operating systems. 1.3.1 Step-by-step guide on installing R. Download the R installer from https://cran.r-project.org/. a). Click on the link for your operating system. Make sure the installer is for the latest R version. For example, the latest version is 4.3.3. b). Click install R for the first time. c). Use the download link at the top and save the file. Run the installer (double click), default settings are fine. 1.3.2 Step-by-step guide on installing RStudio and Set Up. Wait until the R installer has finished. 2.Download RStudio installer from the official website https://posit.co/download/rstudio-desktop/. After the download is complete, double-click on the installer and follow the installation steps to install it in your computer. After successful installation, you can launch RStudio by double-clicking the RStudio icon on your desktop or from the Start menu. You can install the packages using the install.packages() function. However, for the base R visualization, you don’t need to install any package which will support in plotting of graphs except where we you will be required to use data that comes with R packages. The last set up may be setting your working directory to the folder where your R scripts and data files are located. This makes it easier to access your files but it is optional. 1.4 Basic R Concepts. 1.4.1 Introduction to R syntax and basic commands. R is designed for statistical computing and graphics. In this section, we will cover some basic syntax and commands to help you get started with R. 1. R as a Calculator: You can use R as a simple calculator. Here are some basic arithmetic operations: # Addition 2 + 3 # Subtraction 5 - 2 # Multiplication 2 * 3 # Division 6 / 2 # Exponentiation 2^3 2. Assigning Values to Variables: You can store values in variables using the assignment operator &lt;- or =. # Assigning a value to a variable x &lt;- 5 y &lt;- 3 # You can also use = z = x + y 3. Basic Data Types: R supports several basic data types, including numeric, character, logical, and complex. # Numeric num &lt;- 10 # Character char &lt;- &quot;Hello, Basim!&quot; # Logical logic &lt;- TRUE # Complex comp &lt;- 3 + 2i 4. Vectors: A vector is a sequence of data elements of the same basic type. You can create a vector using the c() function. # Creating a numeric vector nums &lt;- c(1, 2, 3, 4, 5) # Creating a character vector chars &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;) 5. Indexing and Slicing: You can access elements of a vector using square brackets []. # Accessing elements of a vector nums &lt;- c(1, 2, 3, 4, 5) nums[1] # Access the first element of nums nums[2:4] # Access the second to fourth elements of nums nums[1,4,6] # Access the first, fourth and sixth elements of nums 6. Functions: R has a large number of built-in functions, and you can also create your own functions for some tasks that can not be achieved by built-in functions. # Built-in function sqrt(16) # Square root function nums &lt;- c(1, 2, 3, 4, 5) mean(nums) # the mean of nums elements var(nums) # the variance sd(nums) # standard deviation # User-defined function add &lt;- function(a, b) { return(a + b) } add(3, 5) 1.4.2 Overview of R’s data types and structures essential for visualization R provides several data types and structures that are essential for data visualization. Understanding these data types and structures is crucial for effectively analyzing and visualizing data. 1. Numeric: Numeric data type is used to represent continuous numerical values. num &lt;- 5.6 2. Integer: Integer data type is used to represent integer values. int &lt;- 10L 3. Character: Character data type is used to represent text data. char &lt;- &quot;Hi, John!&quot; 4. Logical: Logical data type is used to represent Boolean values ( TRUE or FALSE). logic &lt;- TRUE 5. Vector: A vector is a sequence of data elements of the same basic type. It is created using the concatenate c() command. nums &lt;- c(1, 2, 3, 4, 5) # A vector of numeric data type chars &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;) # A vector of character data type 6. Matrix: A matrix is a two-dimensional array with rows and columns in that order respectively, that is (\\(R \\times C\\) ). It is created using the matrix() command. mat &lt;- matrix(1:12, nrow = 3, ncol = 4) # A matrix with three rows and 2 columns 7. Data Frame: A data frame is a two-dimensional data structure with rows and columns, similar to a spreadsheet. It can contain several data types. It is created using the command data.frame() command. df &lt;- data.frame( Name = c(&quot;John&quot;, &quot;Alice&quot;, &quot;Bob&quot;), Age = c(25, 30, 35), Height = c(175, 160, 180) ) 8. List: A list is an ordered collection of objects (which may be of different types: numeric, character, etc.). It is created using the list() command. lst &lt;- list( Name = c(&quot;John&quot;, &quot;Alice&quot;, &quot;Bob&quot;), Age = c(25, 30, 35), Height = c(175, 160, 180) ) 9. Factors: Factors are used to represent categorical data. It is created using the factor() command. gender &lt;- factor(c(&quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Female&quot;)) loan_default&lt;-factor(c(&#39;Yes&#39;, &#39;No&#39;)) 1.5 Practical Examples: Exercises Exercise 1: Basic arithmetic Create a variable called \\(x\\) and give it the value 15.Take the exponent of the variable and add 5 to the final result. Print the final result of \\(x\\). # Your code Exercise 2: Vectors: The weights of five people before and after a diet programme are given in the table below. Read the ‘before’ and ‘after’ values into two different vectors called before and after. Use R to evaluate the amount of weight lost for each participant. What is the average amount of weight lost? Before 78 72 78 79 105 After 67 65 79 70 93 #Your code Exercise 3: Matrices Create two matrices called A and X defined below. \\[ A= \\begin{pmatrix} 1 &amp; 4 &amp; 7 \\\\ 2 &amp; 5 &amp; 8 \\\\ 3 &amp; 6 &amp; 10 \\\\ \\end{pmatrix} \\] \\[ X= \\begin{pmatrix} 1&amp;2&amp;3\\\\ \\end{pmatrix} \\] Find: the product of A and X. the transpose of A. the determinant of A. the diagonal of A. the inverse of A. #Your code Exercise 4: Creating Data Frames Create a small data frame representing a database of films. It should contain the fields title, director, year, country, and at least three films. Create a second data frame of the same format as above, but containing just one new film. Merge the two data frames using rbind(). Try sorting the titles using sort(): what happens? #Your code "],["r-base-graphics---starting-with-the-basics.html", "Chapter 2 R BASE GRAPHICS - STARTING WITH THE BASICS", " Chapter 2 R BASE GRAPHICS - STARTING WITH THE BASICS "],["data-structures-relevant-to-visualization.html", "Chapter 3 DATA STRUCTURES RELEVANT TO VISUALIZATION", " Chapter 3 DATA STRUCTURES RELEVANT TO VISUALIZATION "],["customizing-graphs-in-r.html", "Chapter 4 CUSTOMIZING GRAPHS IN R", " Chapter 4 CUSTOMIZING GRAPHS IN R "],["advanced-base-plotting-techniques.html", "Chapter 5 ADVANCED BASE PLOTTING TECHNIQUES", " Chapter 5 ADVANCED BASE PLOTTING TECHNIQUES "],["plotting-time-series-data.html", "Chapter 6 PLOTTING TIME SERIES DATA", " Chapter 6 PLOTTING TIME SERIES DATA "],["statistical-graphs-in-r.html", "Chapter 7 STATISTICAL GRAPHS IN R", " Chapter 7 STATISTICAL GRAPHS IN R "],["introduction-to-ggplot2.html", "Chapter 8 INTRODUCTION TO ggplot2", " Chapter 8 INTRODUCTION TO ggplot2 "],["advanced-data-visualization-with-ggplot2-and-other-packages.html", "Chapter 9 ADVANCED DATA VISUALIZATION WITH ggplot2 AND OTHER PACKAGES", " Chapter 9 ADVANCED DATA VISUALIZATION WITH ggplot2 AND OTHER PACKAGES "],["real-world-applications-and-case-studies.html", "Chapter 10 REAL-WORLD APPLICATIONS AND CASE STUDIES", " Chapter 10 REAL-WORLD APPLICATIONS AND CASE STUDIES "],["references.html", "REFERENCES", " REFERENCES "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
